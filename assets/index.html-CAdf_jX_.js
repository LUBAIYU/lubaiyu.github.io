import{_ as e,o as p,c as r,d as a}from"./app-BYU0ldrB.js";const o={},c=a('<h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h3><h4 id="初识docker" tabindex="-1"><a class="header-anchor" href="#初识docker"><span>初识Docker</span></a></h4><p>Docker是一个快速交付应用，运行应用的技术：</p><p>1.可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</p><p>2.运行时利用沙箱机制形成隔离容器，各个应用互不干扰</p><p>3.启动、移除都可以通过一行命令完成，方便快捷</p><br><p>镜像：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像</p><p>容器：镜像中的应用程序运行后形成的进程就是容器，只是Docker会给容器做隔离，对外不可见</p><br><p>Docker架构：</p><p>服务端：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p><p>客户端：通过命令或RestAPI向Docker服务端发送指令，可以在本地或远程向服务端发送指令</p><br><h4 id="使用docker" tabindex="-1"><a class="header-anchor" href="#使用docker"><span>使用Docker</span></a></h4><h5 id="_1-镜像命令" tabindex="-1"><a class="header-anchor" href="#_1-镜像命令"><span>1.镜像命令</span></a></h5><p>docker pull 镜像名称 : 版本号 功能：从镜像服务器DockerHub拉取镜像</p><p>例：docker pull MySQL:5.7</p><p>补充：如果不加版本号则默认拉取最新版本的镜像</p><br><p>docker rmi 镜像名称 : 版本号/镜像ID 功能：从本地镜像中删除指定镜像</p><p>例：docker rmi MySQL : 5.7</p><br><p>docker images 功能：查看本地所有镜像</p><p>docker push 功能：向镜像服务器推送指定镜像</p><p>docker save 功能：将指定镜像导出到磁盘中</p><p>docker load 功能：从本地磁盘加载镜像到Docker中</p><p>补充：以上命令具体用法较多，可用docker 操作名称 --help查看具体用法及说明</p><p>例：docker push --help</p><br><h5 id="_2-容器命令" tabindex="-1"><a class="header-anchor" href="#_2-容器命令"><span>2.容器命令</span></a></h5><p>docker run 功能：运行容器</p><p>常见参数：</p><p>--name：指定容器名称</p><p>-p：指定端口映射</p><p>-d：让容器后台运行</p><p>常用：docker run --name 容器名称 -p 本地端口：容器端口 -d 镜像名称</p><p>例：docker run --name mn -p 80:80 -d nginx</p><br><p>docker pause 功能：将运行中的容器暂停</p><p>docker unpause 功能：将暂停中的容器恢复运行</p><p>docker stop 功能：将运行中的容器停止</p><p>docker start 功能：将停止中的容器恢复运行</p><p>docker ps 功能：查看所有运行的容器及状态</p><p>docker logs 功能：查看容器运行日志</p><p>docker rm(容器ID或名称) 功能：删除指定容器（需要先停止容器）</p><br><p>docker exec 功能：进入容器执行命令</p><p>常用：docker exec -it 容器名称 bash</p><p>例：docker exec -it mn bash 进入容器并开启交互功能</p><br><h5 id="_3-数据卷命令" tabindex="-1"><a class="header-anchor" href="#_3-数据卷命令"><span>3.数据卷命令</span></a></h5><p>数据卷是一个虚拟目录，指向宿主机文件系统中的某个目录</p><p>数据卷的作用：将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</p><p>命令语法：docker volume 具体命令</p><p>docker volume create 功能：创建一个volumn</p><p>docker volume inspect 功能：显示一个或多个volumn的信息</p><p>docker volume ls 功能：列出所有的volumn</p><p>docker volume prune 功能：删除未使用的volume</p><p>docker volume rm 功能：删除一个或多个指定的volumn</p><br><p>将容器中的文件挂载到指定文件：</p><p>命令 : -v 数据卷名称：容器内目录</p><p>-v 宿主机文件：容器内文件</p><p>-v 宿主机目录：容器内目录</p><p>例：docker run --name mn -p 80:80 -v html:/user/share/nginx/html -d nginx</p><br><h4 id="自定义镜像" tabindex="-1"><a class="header-anchor" href="#自定义镜像"><span>自定义镜像</span></a></h4><h5 id="_1-镜像结构" tabindex="-1"><a class="header-anchor" href="#_1-镜像结构"><span>1.镜像结构</span></a></h5><p>镜像是分层结构，每一层称为一个Layer</p><p>BaseImage层：包含基本的系统函数库、环境变量、文件系统</p><p>Entrypoint：入口，是镜像中应用启动的命令</p><p>其他：在BaseImage基础上添加依赖、安装程序、完成整个应用的安装和配置</p><br><h5 id="_2-dockerfile" tabindex="-1"><a class="header-anchor" href="#_2-dockerfile"><span>2.Dockerfile</span></a></h5><p>Dockerfile是一个文本文件，其中包含一个个的指令，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer</p><br><p>常见指令：</p><p>指令 说明 示例</p><p>FROM 指定基础镜像 FROM centos:6</p><p>ENV 设置环境变量，可在后面指令使用 ENV key value</p><p>COPY 拷贝本地文件到镜像的指定目录 COPY ./mysql-5.7.rpm /tmp</p><p>RUN 执行Linux的shell命令，一般是安装过程的命令 RUN yum install gcc</p><p>EXPOSE 指定容器运行时监听的端口，是给镜像使用者看的 EXPOSE 8080</p><p>ENTRYPOINT 镜像中应用的启动命令，容器运行时调用 ENTRYPOINT java -jar xx.jar</p><br><h5 id="_3-dockercompose" tabindex="-1"><a class="header-anchor" href="#_3-dockercompose"><span>3.DockerCompose</span></a></h5><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器</p><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p>',89),d=[c];function s(n,t){return p(),r("div",null,d)}const h=e(o,[["render",s],["__file","index.html.vue"]]),m=JSON.parse(`{"path":"/center/8wsdk9g9/","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","author":"路白榆","createTime":"2024/04/21 14:13:19","permalink":"/center/8wsdk9g9/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":3,"title":"Docker","slug":"docker","link":"#docker","children":[]}],"readingTime":{"minutes":3.94,"words":1181},"git":{"updatedTime":1713684513000,"contributors":[{"name":"user","email":"1296800094@qq.com","commits":1}]},"filePathRelative":"notes/middleware/docker.md"}`);export{h as comp,m as data};
